REACT
======================
npm create vite
npm install
npm run dev
======================
src/components:
zd1.tsx itd.

//imie i nazwisko:
import {useState} from 'react';

export const Zd1 = () => {
    const [name, setName] = useState(" ");

    const handleClick = () => {
        setName("Emilia Pustelnik");
    };

    return (
        <div>
            <p>{name}</p>
            <button onClick={handleClick}>Pokaż autora</button>
        </div>
    );
};

//linii:
import {useState} from 'react';

export const Zd2 = () => {
    const links = [
        {id: 1, name: "Allegro", url: "https://allegro.pl"},
        {id: 2, name: "Google", url: "https://google.com"},
        {id: 3, name: "Wikipedia", url: "https://wikipedia.org"},
    ];

    const [selectedLinks, setSelectedLinks] = useState<number[]>([]);

    const handleClick = (id: number) => {
        setSelectedLinks((prev) => 
            prev.includes(id) ? prev.filter((linkId) => linkId !== id) : [...prev, id]
        );

====
  const handleClick = (id: number) => {
    setSelectedLink(id);
  };
====
};


return(
    <ul>
        {links.map((link) => (
            <li
            key={link.id}
            onClick={() => handleClick(link.id)}
            style={{backgroundColor: selectedLinks.includes(link.id) ? "lightblue" : "white", cursor: "pointer"}}>
                <a href={link.url} target='_blank' rel="noopener noreferrer">{link.name}</a>
            </li>
        ))}
    </ul>
);
};

//licznik
import {useState} from 'react';

export const Zd4 = () =>{
    const [count, setCount] = useState(0);

    const handleClick = (value: number) => {
        setCount(count + value);
      };

    return(
        <div>
            <p>Wartość: {count}</p>
            <button onClick={() => handleClick(-2)}>-2</button>
            <button onClick={() => setCount(count - 1)}>-1</button>
            <button onClick={() => setCount(count + 1)}>+1</button>
            <button onClick={() => handleClick(+2)}>+2</button>

        </div>
    );
};

//galeria:
import React, {useState} from 'react';
const images = [
    "/assets/react/svg",
  "https://via.placeholder.com/300x200?text=Image+2",
  "https://via.placeholder.com/300x200?text=Image+3",
  "https://via.placeholder.com/300x200?text=Image+4",
];

export const Zd5 = () => {
    const [currentImage, setCurrentImage] = useState(0);

    const handleNext = () => {
        if(currentImage < images.length - 1){
            setCurrentImage(currentImage + 1);
        }else{
            alert("To jest ostatnie zdjęcie");
        }
    };
    const handlePrev = () => {
        if(currentImage > 0){
            setCurrentImage(currentImage - 1);
        }else{
            alert("To jest ostatnie zdjęcie");
        }
    };

    return(
        <div>
            <img src={images[currentImage]} alt="zdjęcie" />
            <button onClick={handlePrev}>Poprzednie</button>
            <button onClick={handleNext}>Następne</button>
        </div>
    );

    };
======================
App.tsx:
import { Zd1 } from "./components/zd1";
import { Zd2 } from "./components/zd2";
import { Zd3 } from "./components/zd3";
import { Zd4 } from "./components/zd4";
import { Zd5 } from "./components/zd5";

import './App.css'

function App(){
  return(
    <div className="App">
      <h3>Zd1</h3>
      <Zd1/>

      <h3>Zd2</h3>
      <Zd2/>

      <h3>Zd3</h3>
      <Zd3/>

      <h3>Zd4</h3>
      <Zd4/>

      
      <h3>Zd5</h3>
      <Zd5/>
    </div>
  );
}

export default App;

import { useState } from "react";
import { 
  TextField, 
  Button, 
  Box, 
  Typography, 
  Alert
} from "@mui/material";

export const TriangleChecker = () => {
  // Stan przechowujący wartości boków i wynik
  const [sides, setSides] = useState({
    a: '',
    b: '',
    c: ''
  });
  const [result, setResult] = useState<string | null>(null);

  // Funkcja sprawdzająca czy można utworzyć trójkąt
  const checkTriangle = () => {
    // Konwersja string na number
    const a = Number(sides.a);
    const b = Number(sides.b);
    const c = Number(sides.c);

    // Sprawdzenie czy wszystkie wartości są dodatnie
    if (a <= 0 || b <= 0 || c <= 0) {
      setResult("Długości boków muszą być większe od 0!");
      return;
    }

    // Sprawdzenie warunku na istnienie trójkąta
    // (suma długości dwóch dowolnych boków musi być większa od długości trzeciego boku)
    if (a + b > c && b + c > a && a + c > b) {
      setResult("Z podanych długości można utworzyć trójkąt!");
    } else {
      setResult("Z podanych długości NIE można utworzyć trójkąta!");
    }
  };

  // Obsługa zmiany wartości w polach input
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setSides(prev => ({
      ...prev,
      [name]: value
    }));
  };

  return (
    <Box sx={{ maxWidth: 400, margin: '20px auto', p: 3 }}>
      <Typography variant="h5" gutterBottom>
        Sprawdź czy można utworzyć trójkąt
      </Typography>
      
      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
        <TextField
          label="Długość boku a"
          name="a"
          type="number"
          value={sides.a}
          onChange={handleChange}
          fullWidth
        />
        
        <TextField
          label="Długość boku b"
          name="b"
          type="number"
          value={sides.b}
          onChange={handleChange}
          fullWidth
        />
        
        <TextField
          label="Długość boku c"
          name="c"
          type="number"
          value={sides.c}
          onChange={handleChange}
          fullWidth
        />

        <Button 
          variant="contained" 
          onClick={checkTriangle}
          disabled={!sides.a || !sides.b || !sides.c}
        >
          Sprawdź
        </Button>

        {result && (
          <Alert severity={result.includes("można") ? "success" : "error"}>
            {result}
          </Alert>
        )}
      </Box>
    </Box>
  );
};
==================
pierwiastek bez math.sqrt
import { useState } from "react";
import { 
  TextField, 
  Button, 
  Box, 
  Typography, 
  Alert,
  CircularProgress 
} from "@mui/material";

export const SquareRoot = () => {
  const [number, setNumber] = useState<string>("");
  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isCalculating, setIsCalculating] = useState(false);

  // Funkcja obliczająca pierwiastek metodą Newtona
  const calculateSquareRoot = (n: number, precision: number = 0.0001): number => {
    if (n < 0) throw new Error("Nie można obliczyć pierwiastka z liczby ujemnej");
    if (n === 0) return 0;
    
    let x = n; // Początkowe przybliżenie
    let root;
    
    // Metoda Newtona: x(n+1) = (x(n) + N/x(n))/2
    do {
      root = x;
      x = (x + n / x) / 2;
    } while (Math.abs(root - x) > precision);
    
    return x;
  };

  const handleCalculate = () => {
    setError(null);
    setResult(null);
    setIsCalculating(true);

    try {
      const inputNumber = parseFloat(number);
      
      if (isNaN(inputNumber)) {
        throw new Error("Proszę wprowadzić poprawną liczbę");
      }

      // Symulacja dłuższego obliczenia
      setTimeout(() => {
        try {
          const sqrtResult = calculateSquareRoot(inputNumber);
          setResult(sqrtResult.toFixed(6));
          setIsCalculating(false);
        } catch (err) {
          if (err instanceof Error) {
            setError(err.message);
          } else {
            setError("Wystąpił nieznany błąd");
          }
          setIsCalculating(false);
        }
      }, 500);

    } catch (err) {
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError("Wystąpił nieznany błąd");
      }
      setIsCalculating(false);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setNumber(e.target.value);
    setResult(null);
    setError(null);
  };

  return (
    <Box sx={{ maxWidth: 400, margin: '20px auto', p: 3 }}>
      <Typography variant="h5" gutterBottom>
        Kalkulator pierwiastka kwadratowego
      </Typography>
      
      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
        <TextField
          label="Wprowadź liczbę"
          type="number"
          value={number}
          onChange={handleInputChange}
          fullWidth
          error={!!error}
          helperText={error}
        />

        <Button 
          variant="contained" 
          onClick={handleCalculate}
          disabled={!number || isCalculating}
        >
          {isCalculating ? (
            <CircularProgress size={24} color="inherit" />
          ) : (
            "Oblicz pierwiastek"
          )}
        </Button>

        {result && !error && (
          <Alert severity="success">
            Pierwiastek z {number} wynosi: {result}
          </Alert>
        )}

        {/* Dodatkowe informacje o metodzie */}
        <Typography variant="body2" color="text.secondary" sx={{ mt: 2 }}>
          Obliczenia wykonywane są metodą Newtona (metoda stycznych).
          Jest to iteracyjna metoda przybliżania wartości pierwiastka kwadratowego.
        </Typography>
      </Box>
    </Box>
  );
};

====================




